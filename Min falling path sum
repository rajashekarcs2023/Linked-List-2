//Approach:
/* 1. First try the greedy approach but it would fail in many cases
2. So we try the exhaustive approach - and figure out that there are repeated sub-problems
3. Now we go for DP
TC =O(n^2) , SC = O(1)

//Logic:
Handle first column and last column as base cases
handle the middle columns in one case
Then find the minimum in the top row



class Solution {
    public int minFallingPathSum(int[][] matrix) {
        if(matrix == null || matrix.length == 0) return 0;
        int n = matrix.length;
        for(int i = n-2; i>=0;i--){
            for(int j = 0; j < n; j++){
                if(j == 0){
                    matrix[i][j] = matrix[i][j] + Math.min(matrix[i+1][j], matrix[i+1][j+1]);

                }
                else if( j == n-1){
                    matrix[i][j] += Math.min(matrix[i+1][j],matrix[i+1][j-1]);

                }
                else{
                    matrix[i][j] += Math.min(matrix[i+1][j], Math.min(matrix[i+1][j-1], matrix[i+1][j+1]));
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for(int j=0;j<n;j++){
            min = Math.min(min, matrix[0][j]);
        }
        return min;
    }
}
