/* Logic:
Brute force : Take an array list and store the linkedlist and then make a new list in the given order
TC = O(n), SC = O(n)
// Another appraoch:
1. Find the middle of LL (Take care of even and odd case) O(n/2)
2. Reverse the second half of the LL O(n/2)
(reset the slow and fast pointers)
3.Break the list after the half so that the reverse list is now a separate list without a connection
4. Merge them together O(n/2)
TC = O(n), SC = O(1)
// Code logic: 
temp = slow.next;
slow.next = fast;
fast = fast.next
slow.next.next = temp;
slow = temp; */

class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) return;

        //1. finding the middle
        ListNode slow = head;
        ListNode fast = head;

        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        //2. Reversing the 2nd half of the linked list
        fast = reverse(slow.next);
        slow.next = null;


        //3. merging the two linked lists together
        slow = head;
        ListNode temp = null;
        while(fast!= null){
            temp = slow.next;
            slow.next = fast;
            fast = fast.next;
            slow.next.next = temp;
            slow = temp;
        }
    }

    private ListNode reverse(ListNode head){
        if(head == null || head.next == null) return head;
        ListNode prev = null;
        ListNode curr = head;
        ListNode fast = head.next;

        while(fast!=null){
            curr.next = prev;
            prev = curr;
            curr = fast;
            fast = fast.next;
        }
        curr.next = prev;
        return curr;
    }


}
